{"ast":null,"code":"// ðŸ”¹ Importing helper functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state for the counter slice\n//    - counter: numeric value\n//    - showCounter: boolean flag to toggle counter visibility\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n// ðŸ”¹ Creating the counter slice using createSlice()\nconst counterSlice = createSlice({\n  name: 'counter',\n  // Unique slice name (used in action types)\n  initialState: initialCounterState,\n  reducers: {\n    // Increment counter by 1\n    increament(state) {\n      state.counter++; // Immer handles mutation safely\n    },\n    // Decrement counter by 1\n    decrement(state) {\n      state.counter--;\n    },\n    // Increase counter by a dynamic payload value\n    increase(state, action) {\n      state.counter += action.payload;\n    },\n    // Toggle the visibility of the counter\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n    // Reset counter to its initial value\n    reset(state) {\n      state.counter = initialCounterState.counter;\n    }\n  }\n});\n\n// ðŸ”¹ Initial state for authentication slice\nconst intialAuthState = {\n  isAuthenticated: false\n};\n\n// ðŸ”¹ Creating the authentication slice\nconst authSlice = createSlice({\n  name: 'authentication',\n  // Slice name\n  initialState: intialAuthState,\n  reducers: {\n    // Set authentication to true\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    // Set authentication to false\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// ðŸ”¹ Configuring the store with multiple reducers\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    // State managed under `state.counter`\n    auth: authSlice.reducer // State managed under `state.auth`\n  }\n});\n\n// ðŸ”¹ Exporting the configured store\nexport default store;\n\n// ðŸ”¹ Exporting the auto-generated actions from both slices\n// These will be used inside components to dispatch actions\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increament","state","decrement","increase","action","payload","toggle","reset","intialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/index.js"],"sourcesContent":["// ðŸ”¹ Importing helper functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state for the counter slice\n//    - counter: numeric value\n//    - showCounter: boolean flag to toggle counter visibility\nconst initialCounterState = {\n    counter: 0,\n    showCounter: true\n};\n\n// ðŸ”¹ Creating the counter slice using createSlice()\nconst counterSlice = createSlice({\n    name: 'counter', // Unique slice name (used in action types)\n    initialState: initialCounterState,\n    reducers: {\n        // Increment counter by 1\n        increament(state) {\n            state.counter++; // Immer handles mutation safely\n        },\n\n        // Decrement counter by 1\n        decrement(state) {\n            state.counter--;\n        },\n\n        // Increase counter by a dynamic payload value\n        increase(state, action) {\n            state.counter += action.payload;\n        },\n\n        // Toggle the visibility of the counter\n        toggle(state) {\n            state.showCounter = !state.showCounter;\n        },\n\n        // Reset counter to its initial value\n        reset(state) {\n            state.counter = initialCounterState.counter;\n        }\n    }\n});\n\n// ðŸ”¹ Initial state for authentication slice\nconst intialAuthState = {\n    isAuthenticated: false\n};\n\n// ðŸ”¹ Creating the authentication slice\nconst authSlice = createSlice({\n    name: 'authentication', // Slice name\n    initialState: intialAuthState,\n    reducers: {\n        // Set authentication to true\n        login(state) {\n            state.isAuthenticated = true;\n        },\n\n        // Set authentication to false\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n// ðŸ”¹ Configuring the store with multiple reducers\nconst store = configureStore({\n    reducer: {\n        counter: counterSlice.reducer,  // State managed under `state.counter`\n        auth: authSlice.reducer         // State managed under `state.auth`\n    }\n});\n\n// ðŸ”¹ Exporting the configured store\nexport default store;\n\n// ðŸ”¹ Exporting the auto-generated actions from both slices\n// These will be used inside components to dispatch actions\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EAAE;EACjBC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACN;IACAC,UAAUA,CAACC,KAAK,EAAE;MACdA,KAAK,CAACP,OAAO,EAAE,CAAC,CAAC;IACrB,CAAC;IAED;IACAQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IAED;IACAS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,IAAIU,MAAM,CAACC,OAAO;IACnC,CAAC;IAED;IACAC,MAAMA,CAACL,KAAK,EAAE;MACVA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C,CAAC;IAED;IACAY,KAAKA,CAACN,KAAK,EAAE;MACTA,KAAK,CAACP,OAAO,GAAGD,mBAAmB,CAACC,OAAO;IAC/C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMc,eAAe,GAAG;EACpBC,eAAe,EAAE;AACrB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGnB,WAAW,CAAC;EAC1BM,IAAI,EAAE,gBAAgB;EAAE;EACxBC,YAAY,EAAEU,eAAe;EAC7BT,QAAQ,EAAE;IACN;IACAY,KAAKA,CAACV,KAAK,EAAE;MACTA,KAAK,CAACQ,eAAe,GAAG,IAAI;IAChC,CAAC;IAED;IACAG,MAAMA,CAACX,KAAK,EAAE;MACVA,KAAK,CAACQ,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EACzBsB,OAAO,EAAE;IACLpB,OAAO,EAAEE,YAAY,CAACkB,OAAO;IAAG;IAChCC,IAAI,EAAEL,SAAS,CAACI,OAAO,CAAS;EACpC;AACJ,CAAC,CAAC;;AAEF;AACA,eAAeD,KAAK;;AAEpB;AACA;AACA,OAAO,MAAMG,cAAc,GAAGpB,YAAY,CAACqB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}