{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n//index.js \n// Here the showCOunter is added to work eith multiple states\n// it will be false when i click toggle button in Counter.js\nimport { createStore } from 'redux';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// Creating a slice of the Redux state for the \"counter\" feature\nconst counterSlice = createSlice({\n  // Unique name for this slice (used in action types like 'counter/increament')\n  name: 'counter',\n  // Initial state of this slice\n  initialState,\n  // Reducers: Define how the state should change based on actions\n  reducers: {\n    // Increments the counter value by 1\n    increament(state) {\n      // Thanks to Immer (used internally by Redux Toolkit), we can safely mutate state\n      state.counter++;\n    },\n    // Decrements the counter value by 1\n    decrement(state) {\n      state.counter--;\n    },\n    // Increases the counter by a custom value passed in the action payload\n    increase(state, action) {\n      // action.payload is preferred over action.amount\n      state.counter = state.counter + action.payload;\n    },\n    // Toggles the visibility of the counter (true <-> false)\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createSlice","createStore","initialState","counter","showCounter","counterSlice","name","reducers","increament","state","decrement","increase","action","payload","toggle","store","counterReducer"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/index.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n//index.js \n// Here the showCOunter is added to work eith multiple states\n// it will be false when i click toggle button in Counter.js\nimport { createStore } from 'redux';\n\nconst initialState = { counter: 0, showCounter: true }\n\n\n// Creating a slice of the Redux state for the \"counter\" feature\nconst counterSlice = createSlice({\n    // Unique name for this slice (used in action types like 'counter/increament')\n    name: 'counter',\n\n    // Initial state of this slice\n    initialState,\n\n    // Reducers: Define how the state should change based on actions\n    reducers: {\n        // Increments the counter value by 1\n        increament(state) {\n            // Thanks to Immer (used internally by Redux Toolkit), we can safely mutate state\n            state.counter++;\n        },\n\n        // Decrements the counter value by 1\n        decrement(state) {\n            state.counter--;\n        },\n\n        // Increases the counter by a custom value passed in the action payload\n        increase(state, action) {\n            // action.payload is preferred over action.amount\n            state.counter = state.counter + action.payload;\n        },\n\n        // Toggles the visibility of the counter (true <-> false)\n        toggle(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n});\n\n\n\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA;AACA;AACA,SAASC,WAAW,QAAQ,OAAO;AAEnC,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAGtD;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7B;EACAM,IAAI,EAAE,SAAS;EAEf;EACAJ,YAAY;EAEZ;EACAK,QAAQ,EAAE;IACN;IACAC,UAAUA,CAACC,KAAK,EAAE;MACd;MACAA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IAED;IACAO,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IAED;IACAQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpB;MACAH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAClD,CAAC;IAED;IACAC,MAAMA,CAACL,KAAK,EAAE;MACVA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAIF,MAAMW,KAAK,GAAGd,WAAW,CAACe,cAAc,CAAC;AAEzC,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}