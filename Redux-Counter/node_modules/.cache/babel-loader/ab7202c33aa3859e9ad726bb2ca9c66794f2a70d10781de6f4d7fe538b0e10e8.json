{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state for the counter slice\n//    - counter: numeric value\n//    - showCounter: boolean flag to toggle counter visibility\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n// ðŸ”¹ Creating the counter slice using createSlice()\nconst counterSlice = createSlice({\n  name: 'counter',\n  // Unique slice name (used in action types)\n  initialState: initialCounterState,\n  reducers: {\n    // Increment counter by 1\n    increament(state) {\n      state.counter++; // Immer handles mutation safely\n    },\n    // Decrement counter by 1\n    decrement(state) {\n      state.counter--;\n    },\n    // Increase counter by a dynamic payload value\n    increase(state, action) {\n      state.counter += action.payload;\n    },\n    // Toggle the visibility of the counter\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n    // Reset counter to its initial value\n    reset(state) {\n      state.counter = initialCounterState.counter;\n    }\n  }\n});\n\n// ðŸ”¹ Exporting the auto-generated actions from both slices\n// These will be used inside components to dispatch actions\nexport const counterActions = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increament","state","decrement","increase","action","payload","toggle","reset","counterActions","actions","reducer"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/counter.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state for the counter slice\n//    - counter: numeric value\n//    - showCounter: boolean flag to toggle counter visibility\nconst initialCounterState = {\n    counter: 0,\n    showCounter: true\n};\n\n// ðŸ”¹ Creating the counter slice using createSlice()\nconst counterSlice = createSlice({\n    name: 'counter', // Unique slice name (used in action types)\n    initialState: initialCounterState,\n    reducers: {\n        // Increment counter by 1\n        increament(state) {\n            state.counter++; // Immer handles mutation safely\n        },\n\n        // Decrement counter by 1\n        decrement(state) {\n            state.counter--;\n        },\n\n        // Increase counter by a dynamic payload value\n        increase(state, action) {\n            state.counter += action.payload;\n        },\n\n        // Toggle the visibility of the counter\n        toggle(state) {\n            state.showCounter = !state.showCounter;\n        },\n\n        // Reset counter to its initial value\n        reset(state) {\n            state.counter = initialCounterState.counter;\n        }\n    }\n});\n\n// ðŸ”¹ Exporting the auto-generated actions from both slices\n// These will be used inside components to dispatch actions\nexport const counterActions = counterSlice.actions;\n\nexport default counterSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,SAAS;EAAE;EACjBC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACN;IACAC,UAAUA,CAACC,KAAK,EAAE;MACdA,KAAK,CAACP,OAAO,EAAE,CAAC,CAAC;IACrB,CAAC;IAED;IACAQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IAED;IACAS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,IAAIU,MAAM,CAACC,OAAO;IACnC,CAAC;IAED;IACAC,MAAMA,CAACL,KAAK,EAAE;MACVA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C,CAAC;IAED;IACAY,KAAKA,CAACN,KAAK,EAAE;MACTA,KAAK,CAACP,OAAO,GAAGD,mBAAmB,CAACC,OAAO;IAC/C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMc,cAAc,GAAGZ,YAAY,CAACa,OAAO;AAElD,eAAeb,YAAY,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}