{"ast":null,"code":"// Importing functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state with two properties: counter and showCounter\n// counter is a number; showCounter is a boolean used to toggle UI display\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// ðŸ”¹ Creating a Redux slice for the counter feature\nconst initialCounterSlice = createSlice({\n  // Unique name for the slice (used to prefix action types like 'counter/increment')\n  name: 'counter',\n  // Initial state for this slice\n  initialState: initialCounterSlice,\n  // Reducer functions to handle different actions\n  reducers: {\n    // Action to increment the counter by 1\n    increament(state) {\n      // Redux Toolkit uses Immer, so direct state mutation is allowed here\n      state.counter++;\n    },\n    // Action to decrement the counter by 1\n    decrement(state) {\n      state.counter--;\n    },\n    // Action to increase the counter by a dynamic value (provided via action.payload)\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // Note the payload name should be same because redux toolkit uses internally\n    },\n    // Action to toggle the visibility of the counter\n    toggle(state) {\n      state.showCounter = !state.showCounter; // Flips true/false\n    },\n    // Action to toggle the visibility of the counter\n    reset(state) {\n      state.counter = initialState.counter;\n    }\n  }\n});\n\n// ðŸ”¹ Creating and configuring the Redux store with the reducer from our slice\nconst store = configureStore({\n  reducer: counterSlice.reducer // You can also use { counter: counterSlice.reducer } for named slices\n});\n\n// ðŸ”¹ Exporting the store so it can be provided to the React app\nexport default store;\n\n// Export the actions to use them in components\nexport const counterActions = counterSlice.actions;\n\n// these actions will contain all the methods declered in slice","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","initialCounterSlice","name","reducers","increament","state","decrement","increase","action","payload","toggle","reset","store","reducer","counterSlice","counterActions","actions"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/index.js"],"sourcesContent":["// Importing functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state with two properties: counter and showCounter\n// counter is a number; showCounter is a boolean used to toggle UI display\nconst initialState = { counter: 0, showCounter: true }\n\n// ðŸ”¹ Creating a Redux slice for the counter feature\nconst initialCounterSlice = createSlice({\n    // Unique name for the slice (used to prefix action types like 'counter/increment')\n    name: 'counter',\n\n    // Initial state for this slice\n    initialState : initialCounterSlice,\n\n    // Reducer functions to handle different actions\n    reducers: {\n        // Action to increment the counter by 1\n        increament(state) {\n            // Redux Toolkit uses Immer, so direct state mutation is allowed here\n            state.counter++;\n        },\n\n        // Action to decrement the counter by 1\n        decrement(state) {\n            state.counter--;\n        },\n\n        // Action to increase the counter by a dynamic value (provided via action.payload)\n        increase(state, action) {\n            state.counter = state.counter + action.payload; // Note the payload name should be same because redux toolkit uses internally\n        },\n\n        // Action to toggle the visibility of the counter\n        toggle(state) {\n            state.showCounter = !state.showCounter; // Flips true/false\n        },\n        // Action to toggle the visibility of the counter\n        reset(state) {\n            state.counter = initialState.counter\n        }\n    }\n});\n\n// ðŸ”¹ Creating and configuring the Redux store with the reducer from our slice\nconst store = configureStore({\n    reducer: counterSlice.reducer // You can also use { counter: counterSlice.reducer } for named slices\n});\n\n// ðŸ”¹ Exporting the store so it can be provided to the React app\nexport default store;\n\n// Export the actions to use them in components\nexport const counterActions = counterSlice.actions;\n\n// these actions will contain all the methods declered in slice\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA,MAAMC,mBAAmB,GAAGL,WAAW,CAAC;EACpC;EACAM,IAAI,EAAE,SAAS;EAEf;EACAJ,YAAY,EAAGG,mBAAmB;EAElC;EACAE,QAAQ,EAAE;IACN;IACAC,UAAUA,CAACC,KAAK,EAAE;MACd;MACAA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IAED;IACAO,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IAED;IACAQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED;IACAC,MAAMA,CAACL,KAAK,EAAE;MACVA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW,CAAC,CAAC;IAC5C,CAAC;IACD;IACAW,KAAKA,CAACN,KAAK,EAAE;MACTA,KAAK,CAACN,OAAO,GAAGD,YAAY,CAACC,OAAO;IACxC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMa,KAAK,GAAGf,cAAc,CAAC;EACzBgB,OAAO,EAAEC,YAAY,CAACD,OAAO,CAAC;AAClC,CAAC,CAAC;;AAEF;AACA,eAAeD,KAAK;;AAEpB;AACA,OAAO,MAAMG,cAAc,GAAGD,YAAY,CAACE,OAAO;;AAElD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}