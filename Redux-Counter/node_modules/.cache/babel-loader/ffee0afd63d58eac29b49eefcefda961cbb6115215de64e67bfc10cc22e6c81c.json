{"ast":null,"code":"// ðŸ”¹ Importing helper functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state for the counter slice\n//    - counter: numeric value\n//    - showCounter: boolean flag to toggle counter visibility\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n// ðŸ”¹ Initial state for authentication slice\nconst intialAuthState = {\n  isAuthenticated: false\n};\n\n// ðŸ”¹ Creating the authentication slice\nconst authSlice = createSlice({\n  name: 'authentication',\n  // Slice name\n  initialState: intialAuthState,\n  reducers: {\n    // Set authentication to true\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    // Set authentication to false\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// ðŸ”¹ Configuring the store with multiple reducers\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    // State managed under `state.counter`\n    auth: authSlice.reducer // State managed under `state.auth`\n  }\n});\n\n// ðŸ”¹ Exporting the configured store\nexport default store;\n\n// ðŸ”¹ Exporting the auto-generated actions from both slices\n// These will be used inside components to dispatch actions\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","intialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counterSlice","auth","counterActions","actions","authActions"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/index.js"],"sourcesContent":["// ðŸ”¹ Importing helper functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state for the counter slice\n//    - counter: numeric value\n//    - showCounter: boolean flag to toggle counter visibility\nconst initialCounterState = {\n    counter: 0,\n    showCounter: true\n};\n\n\n\n// ðŸ”¹ Initial state for authentication slice\nconst intialAuthState = {\n    isAuthenticated: false\n};\n\n// ðŸ”¹ Creating the authentication slice\nconst authSlice = createSlice({\n    name: 'authentication', // Slice name\n    initialState: intialAuthState,\n    reducers: {\n        // Set authentication to true\n        login(state) {\n            state.isAuthenticated = true;\n        },\n\n        // Set authentication to false\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n// ðŸ”¹ Configuring the store with multiple reducers\nconst store = configureStore({\n    reducer: {\n        counter: counterSlice.reducer,  // State managed under `state.counter`\n        auth: authSlice.reducer         // State managed under `state.auth`\n    }\n});\n\n// ðŸ”¹ Exporting the configured store\nexport default store;\n\n// ðŸ”¹ Exporting the auto-generated actions from both slices\n// These will be used inside components to dispatch actions\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;;AAID;AACA,MAAMC,eAAe,GAAG;EACpBC,eAAe,EAAE;AACrB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC1BQ,IAAI,EAAE,gBAAgB;EAAE;EACxBC,YAAY,EAAEJ,eAAe;EAC7BK,QAAQ,EAAE;IACN;IACAC,KAAKA,CAACC,KAAK,EAAE;MACTA,KAAK,CAACN,eAAe,GAAG,IAAI;IAChC,CAAC;IAED;IACAO,MAAMA,CAACD,KAAK,EAAE;MACVA,KAAK,CAACN,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMQ,KAAK,GAAGb,cAAc,CAAC;EACzBc,OAAO,EAAE;IACLZ,OAAO,EAAEa,YAAY,CAACD,OAAO;IAAG;IAChCE,IAAI,EAAEV,SAAS,CAACQ,OAAO,CAAS;EACpC;AACJ,CAAC,CAAC;;AAEF;AACA,eAAeD,KAAK;;AAEpB;AACA;AACA,OAAO,MAAMI,cAAc,GAAGF,YAAY,CAACG,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGb,SAAS,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}