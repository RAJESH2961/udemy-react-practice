{"ast":null,"code":"// Importing functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state with two properties: counter and showCounter\n// counter is a number; showCounter is a boolean used to toggle UI display\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n// ðŸ”¹ Creating a Redux slice for the counter feature\nconst counterSlice = createSlice({\n  // Unique name for the slice (used to prefix action types like 'counter/increment')\n  name: 'counter',\n  // Initial state for this slice\n  initialState: initialCounterState,\n  // Reducer functions to handle different actions\n  reducers: {\n    // Action to increment the counter by 1\n    increament(state) {\n      // Redux Toolkit uses Immer, so direct state mutation is allowed here\n      state.counter++;\n    },\n    // Action to decrement the counter by 1\n    decrement(state) {\n      state.counter--;\n    },\n    // Action to increase the counter by a dynamic value (provided via action.payload)\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // Note the payload name should be same because redux toolkit uses internally\n    },\n    // Action to toggle the visibility of the counter\n    toggle(state) {\n      state.showCounter = !state.showCounter; // Flips true/false\n    },\n    // Action to toggle the visibility of the counter\n    reset(state) {\n      state.counter = initialState.counter;\n    }\n  }\n});\nconst intialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: intialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// ðŸ”¹ Creating and configuring the Redux store with the reducer from our slice\nconst store = configureStore({\n  // reducer: counterSlice.reducer // You can also use { counter: counterSlice.reducer } for named slices\n  reducer\n});\n\n// ðŸ”¹ Exporting the store so it can be provided to the React app\nexport default store;\n\n// Export the actions to use them in components\nexport const counterActions = counterSlice.actions;\n\n// these actions will contain all the methods declered in slice","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increament","state","decrement","increase","action","payload","toggle","reset","intialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","counterActions","actions"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/index.js"],"sourcesContent":["// Importing functions from Redux Toolkit\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// ðŸ”¹ Initial state with two properties: counter and showCounter\n// counter is a number; showCounter is a boolean used to toggle UI display\nconst initialCounterState = { counter: 0, showCounter: true }\n\n// ðŸ”¹ Creating a Redux slice for the counter feature\nconst counterSlice = createSlice({\n    // Unique name for the slice (used to prefix action types like 'counter/increment')\n    name: 'counter',\n\n    // Initial state for this slice\n    initialState: initialCounterState,\n\n    // Reducer functions to handle different actions\n    reducers: {\n        // Action to increment the counter by 1\n        increament(state) {\n            // Redux Toolkit uses Immer, so direct state mutation is allowed here\n            state.counter++;\n        },\n\n        // Action to decrement the counter by 1\n        decrement(state) {\n            state.counter--;\n        },\n\n        // Action to increase the counter by a dynamic value (provided via action.payload)\n        increase(state, action) {\n            state.counter = state.counter + action.payload; // Note the payload name should be same because redux toolkit uses internally\n        },\n\n        // Action to toggle the visibility of the counter\n        toggle(state) {\n            state.showCounter = !state.showCounter; // Flips true/false\n        },\n        // Action to toggle the visibility of the counter\n        reset(state) {\n            state.counter = initialState.counter\n        }\n    }\n});\nconst intialAuthState = { isAuthenticated : false };\n\nconst authSlice =  createSlice({\n    name : 'authentication',\n    initialState :intialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n\n        },\n    }\n\n\n})\n\n// ðŸ”¹ Creating and configuring the Redux store with the reducer from our slice\nconst store = configureStore({\n    // reducer: counterSlice.reducer // You can also use { counter: counterSlice.reducer } for named slices\n    reducer\n});\n\n// ðŸ”¹ Exporting the store so it can be provided to the React app\nexport default store;\n\n// Export the actions to use them in components\nexport const counterActions = counterSlice.actions;\n\n// these actions will contain all the methods declered in slice\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAE7D;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7B;EACAM,IAAI,EAAE,SAAS;EAEf;EACAC,YAAY,EAAEL,mBAAmB;EAEjC;EACAM,QAAQ,EAAE;IACN;IACAC,UAAUA,CAACC,KAAK,EAAE;MACd;MACAA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IAED;IACAQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IAED;IACAS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED;IACAC,MAAMA,CAACL,KAAK,EAAE;MACVA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW,CAAC,CAAC;IAC5C,CAAC;IACD;IACAY,KAAKA,CAACN,KAAK,EAAE;MACTA,KAAK,CAACP,OAAO,GAAGI,YAAY,CAACJ,OAAO;IACxC;EACJ;AACJ,CAAC,CAAC;AACF,MAAMc,eAAe,GAAG;EAAEC,eAAe,EAAG;AAAM,CAAC;AAEnD,MAAMC,SAAS,GAAInB,WAAW,CAAC;EAC3BM,IAAI,EAAG,gBAAgB;EACvBC,YAAY,EAAEU,eAAe;EAC7BT,QAAQ,EAAE;IACNY,KAAKA,CAACV,KAAK,EAAE;MACTA,KAAK,CAACQ,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAMA,CAACX,KAAK,EAAE;MACVA,KAAK,CAACQ,eAAe,GAAG,KAAK;IAEjC;EACJ;AAGJ,CAAC,CAAC;;AAEF;AACA,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EACzB;EACAsB;AACJ,CAAC,CAAC;;AAEF;AACA,eAAeD,KAAK;;AAEpB;AACA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;;AAElD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}