{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n//index.js \n// Here the showCOunter is added to work eith multiple states\n// it will be false when i click toggle button in Counter.js\nimport { createStore } from 'redux';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increament(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggle(state) {\n      state.showCounter = !showCounter;\n    }\n  }\n});\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increament') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decreament') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  //Increasing value bu 5\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.value,\n      showCounter: state.showCounter\n    };\n  }\n  // Setting the state to false when it is triggered\n  // Setting the state to true when it is triggered\n  // SO that we can toggle between states\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  if (action.type === 'resetCounter') {\n    return {\n      showCounter: state.showCounter,\n      counter: initialState.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createSlice","createStore","initialState","counter","showCounter","name","reducers","increament","state","decrement","increase","action","amount","toggle","counterReducer","type","value","store"],"sources":["/Volumes/LearningLightHouse/Code Practices/REACT-UDEMY/Redux-Counter/src/store/index.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n//index.js \n// Here the showCOunter is added to work eith multiple states\n// it will be false when i click toggle button in Counter.js\nimport { createStore } from 'redux';\n\nconst initialState = { counter: 0, showCounter: true }\n\n\ncreateSlice({\n    name : 'counter',\n    initialState,\n    reducers: {\n        increament(state){\n            state.counter++;\n        },\n        decrement(state){\n            state.counter--;\n        },\n        increase(state, action){\n            state.counter = state.counter+ action.amount;\n        },\n        toggle(state){\n            state.showCounter = !showCounter\n        }\n    }\n});\nconst counterReducer = (state = initialState, action) => {\n    if(action.type === 'increament') {\n        return {\n            counter: state.counter + 1,\n            showCounter: state.showCounter\n        }\n    }\n    if(action.type === 'decreament') {\n        return {\n            counter: state.counter - 1,\n            showCounter: state.showCounter\n        }\n    }\n\n    //Increasing value bu 5\n    if(action.type === 'increase') {\n        return {\n            counter: state.counter + action.value,\n            showCounter: state.showCounter\n        }\n    }\n\t\t// Setting the state to false when it is triggered\n\t\t// Setting the state to true when it is triggered\n\t\t// SO that we can toggle between states\n    if(action.type === 'toggle'){\n        return{\n            showCounter: !state.showCounter,\n            counter: state.counter\n        }\n    }\n\n\n        if(action.type === 'resetCounter'){\n        return{\n            showCounter: state.showCounter,\n            counter: initialState.counter\n        }\n    }\n\n    return state;\n};\n\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA;AACA;AACA,SAASC,WAAW,QAAQ,OAAO;AAEnC,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAGtDJ,WAAW,CAAC;EACRK,IAAI,EAAG,SAAS;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACNC,UAAUA,CAACC,KAAK,EAAC;MACbA,KAAK,CAACL,OAAO,EAAE;IACnB,CAAC;IACDM,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACL,OAAO,EAAE;IACnB,CAAC;IACDO,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnBH,KAAK,CAACL,OAAO,GAAGK,KAAK,CAACL,OAAO,GAAEQ,MAAM,CAACC,MAAM;IAChD,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAC;MACTA,KAAK,CAACJ,WAAW,GAAG,CAACA,WAAW;IACpC;EACJ;AACJ,CAAC,CAAC;AACF,MAAMU,cAAc,GAAGA,CAACN,KAAK,GAAGN,YAAY,EAAES,MAAM,KAAK;EACrD,IAAGA,MAAM,CAACI,IAAI,KAAK,YAAY,EAAE;IAC7B,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEI,KAAK,CAACJ;IACvB,CAAC;EACL;EACA,IAAGO,MAAM,CAACI,IAAI,KAAK,YAAY,EAAE;IAC7B,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEI,KAAK,CAACJ;IACvB,CAAC;EACL;;EAEA;EACA,IAAGO,MAAM,CAACI,IAAI,KAAK,UAAU,EAAE;IAC3B,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAGQ,MAAM,CAACK,KAAK;MACrCZ,WAAW,EAAEI,KAAK,CAACJ;IACvB,CAAC;EACL;EACF;EACA;EACA;EACE,IAAGO,MAAM,CAACI,IAAI,KAAK,QAAQ,EAAC;IACxB,OAAM;MACFX,WAAW,EAAE,CAACI,KAAK,CAACJ,WAAW;MAC/BD,OAAO,EAAEK,KAAK,CAACL;IACnB,CAAC;EACL;EAGI,IAAGQ,MAAM,CAACI,IAAI,KAAK,cAAc,EAAC;IAClC,OAAM;MACFX,WAAW,EAAEI,KAAK,CAACJ,WAAW;MAC9BD,OAAO,EAAED,YAAY,CAACC;IAC1B,CAAC;EACL;EAEA,OAAOK,KAAK;AAChB,CAAC;AAED,MAAMS,KAAK,GAAGhB,WAAW,CAACa,cAAc,CAAC;AAEzC,eAAeG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}